{"version":3,"sources":["FileHeader.jsx","MovieCard.jsx","App.js","serviceWorker.js","index.js"],"names":["FileHeader","react_default","a","createElement","className","src","alt","width","height","React","Component","MovieCard","film","this","props","style","title","release_date","description","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getFilmsData","fetch","then","data","json","res","setState","films","state","FileHeader_FileHeader","map","key","id","MovieCard_MovieCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gHAAgHC,IAAI,GAAGC,MAAM,QAAOC,OAAO,WAGxJP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAVCK,IAAMC,WCAzBC,mLAEjB,IAAIC,EAAOC,KAAKC,MAAMF,KACtB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBW,MAAO,CAAER,MAAO,UAClDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcQ,EAAKI,OACjCf,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCQ,EAAKK,cACpDhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBQ,EAAKM,sBARZT,IAAMC,WCoC9BS,qBA7Bb,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KAKRY,aAAe,WACbC,MAAM,yCACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAG,OAAIX,EAAKY,SAAS,CAAEC,MAAOF,OAPtCX,EAAKc,MAAQ,CACXD,MAAO,IAHQb,oFAFjBP,KAAKa,iEAcL,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACgC,EAAD,CAAY/B,UAAU,WACtBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACZS,KAAKqB,MAAMD,MAAMG,IAAI,SAAAxB,GAAI,OACxBX,EAAAC,EAAAC,cAAA,OAAKkC,IAAKzB,EAAK0B,GAAIlC,UAAU,qBAC3BH,EAAAC,EAAAC,cAACoC,EAAD,CAAW3B,KAAMA,iBAvBfH,IAAMC,YCOJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.a25d02ad.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class FileHeader extends React.Component{\n    render(){\n        return(\n            <header>\n                <div className=\"container mt-3\">\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-2\">\n                            <img src=\"https://upload.wikimedia.org/wikipedia/en/thumb/c/ca/Studio_Ghibli_logo.svg/1200px-Studio_Ghibli_logo.svg.png\" alt=\"\" width='300px'height='150px'/>\n                        </div>\n                        {/* <div className=\"col-8 header\" style={{textAlign:'center'}}><h3>Ghibli Movie List</h3></div> */}\n                        <div className=\"col-2\"></div>\n                    </div>\n                </div>\n\n            </header>\n        )\n    }\n}","import React from \"react\";\n\nexport default class MovieCard extends React.Component {\n  render() {\n    var film = this.props.film;\n    return (\n      <div className=\"card d-flex h-100 \" style={{ width: \"18rem\" }}>\n        <div className=\"card-body \">\n          <h5 className=\"card-title\">{film.title}</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">{film.release_date}</h6>\n          <p className=\"card-text flex-fill\">{film.description}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport FileHeader from \"./FileHeader\";\nimport MovieCard from \"./MovieCard\";\nimport './App.css';\n\nclass App extends React.Component {\n  componentWillMount() {\n    this.getFilmsData();\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      films: []\n    };\n  }\n  getFilmsData = () => {\n    fetch(\"https://ghibliapi.herokuapp.com/films\")\n      .then(data => data.json())\n      .then(res => this.setState({ films: res }));\n  };\n  render() {\n    return (\n      <div className='main'>\n        <FileHeader className='header'/>\n        <div className=\"container-fluid\">\n          <div className=\"row row-eq-height justify-content-center\">\n            {this.state.films.map(film => (\n              <div key={film.id} className=\"col-sm-3 xs-1 m-3\">\n                <MovieCard film={film} />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}